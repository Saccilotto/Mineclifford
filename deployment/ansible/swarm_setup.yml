- name: Configure Minecraft Server with Docker Swarm
  hosts: all
  become: yes
  vars:
    manager_node: "{{ groups['instance1'][0] }}"
    ansible_python_interpreter: /usr/bin/python3
    minecraft_java_version: "latest"
    minecraft_java_memory: "2G"
    minecraft_java_gamemode: "survival"
    minecraft_java_difficulty: "normal"
    minecraft_java_motd: "Mineclifford Java Server"
    minecraft_bedrock_version: "latest"
    minecraft_bedrock_memory: "1G"
    minecraft_bedrock_gamemode: "survival"
    minecraft_bedrock_difficulty: "normal"
    rcon_password: "minecraft"
    grafana_password: "admin"
    timezone: "America/Sao_Paulo"

  tasks:
  # Docker setup tasks
  - name: Remove old Docker versions
    apt:
      name:
        - docker
        - docker-engine
        - docker.io
        - containerd
        - runc
      state: absent
      update_cache: yes

  - name: Install dependencies
    apt:
      name:
        - curl
        - ca-certificates
        - git
        - acl
        - python3
        - python3-pip
        - lsb-release
        - wget
        - netcat-openbsd
        - dnsutils
        - openjdk-17-jre-headless
      state: present
      update_cache: yes

  # Install monitoring tools
  - name: Install monitoring tools
    apt:
      name:
        - htop
        - iotop
        - sysstat
        - vnstat
      state: present
    become: yes

  - name: Install Docker SDK for Python
    apt:
      name: python3-docker
      state: present
      update_cache: yes
  
  - name: Add Docker's official GPG key and save it in the recommended keyring
    ansible.builtin.shell: |
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    args:
      creates: /usr/share/keyrings/docker-archive-keyring.gpg
    ignore_errors: yes

  - name: Add Docker's repository
    ansible.builtin.shell: |
      echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    ignore_errors: yes

  - name: Update apt cache
    ansible.builtin.apt:
      update_cache: yes

  - name: Install Docker packages
    apt:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
      state: present
      update_cache: yes

  - name: Add users to the Docker group
    user:
      name: "{{ item }}"
      groups: docker
      append: yes
    loop:
      - "{{ ansible_ssh_user }}"
    ignore_errors: yes

  - name: Ensure Docker service is running
    systemd:
      name: docker
      state: started
      enabled: true

  # Initialize swarm on manager
  - name: Initialize Swarm on manager node
    shell: docker swarm init --advertise-addr {{ inventory_hostname }}
    when: inventory_hostname == manager_node
    register: swarm_init
    ignore_errors: yes

  # Get the worker token
  # - name: Get swarm worker token
  #   shell: docker swarm join-token -q worker
  #   register: token_output
  #   when: inventory_hostname == manager_node

  # # Set token as a fact on manager
  # - name: Set token fact on manager
  #   set_fact:
  #     worker_token: "{{ token_output.stdout }}"
  #   when: inventory_hostname == manager_node

  # # Join workers to swarm
  # - name: Join workers to swarm
  #   shell: "docker swarm join --token {{ hostvars[groups['instance1'][0]].worker_token }} {{ groups['instance1'][0] }}:2377"
  #   when: inventory_hostname != manager_node
  #   ignore_errors: yes

  - name: Import Minecraft world if provided
    block:
      - name: Create temporary directory for world import
        file:
          path: /tmp/minecraft-world-import
          state: directory
          mode: '0755'
        when: minecraft_world_import is defined
      
      - name: Copy world import file to server
        copy:
          src: "{{ minecraft_world_import }}"
          dest: /tmp/minecraft-world-import/world.tar.gz
          mode: '0644'
        when: minecraft_world_import is defined
      
      - name: Add world import to Docker service
        set_fact:
          minecraft_java_environment: "{{ minecraft_java_environment | default({}) | combine({'WORLD': '/import_world'}) }}"
        when: minecraft_world_import is defined
      
      - name: Add Docker volume bind for world import
        set_fact:
          minecraft_java_volumes: "{{ minecraft_java_volumes | default([]) + ['/tmp/minecraft-world-import:/import_world:ro'] }}"
        when: minecraft_world_import is defined

  # Create directory for Prometheus config
  - name: Create Prometheus configuration directory
    file:
      path: /home/{{ ansible_ssh_user }}/prometheus
      state: directory
      mode: '0755'
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Copy Prometheus configuration
  - name: Copy Prometheus configuration file
    copy:
      src: ../swarm/prometheus/prometheus.yml
      dest: /home/{{ ansible_ssh_user }}/prometheus/prometheus.yml
      mode: '0644'
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Get manager node IP
  - name: Get manager node IP
    shell: hostname -I | awk '{print $1}'
    register: manager_ip_result
    delegate_to: "{{ manager_node }}"
    run_once: true

  - name: Get manager and worker IPs for stack
    set_fact:
      manager_ip_value: "{{ manager_ip_result.stdout }}"
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Create .env file for stack deployment
  - name: Create .env file for stack deployment
    template:
      src: stack.env.j2
      dest: /home/{{ ansible_ssh_user }}/.env
    delegate_to: "{{ manager_ip_result }}"
    run_once: true

  # Copy stack file
  - name: Process stack.yml template with environment variables
    template:
      src: ../swarm/stack.yml
      dest: /home/{{ ansible_ssh_user }}/stack.yml
    vars:
      manager_ip: "{{ manager_ip_value }}"
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Create traefik network if it doesn't exist
  - name: Create traefik network
    shell: docker network create --driver=overlay traefik_network || true
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Deploy the stack
  - name: Deploy the Minecraft stack
    shell: docker stack deploy --with-registry-auth -c /home/{{ ansible_ssh_user }}/stack.yml Mineclifford
    args:
      chdir: /home/{{ ansible_ssh_user }}
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Wait for services to start up
  - name: Wait for services to start up (120 seconds)
    pause:
      seconds: 120

  # Check service status
  - name: Check service status
    command: docker service ls
    register: service_status
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Get final status
  - name: Show service status
    command: docker service ls
    delegate_to: "{{ manager_node }}"
    run_once: true
    register: final_service_status
    ignore_errors: yes
  
  - name: Display service status
    debug:
      var: final_service_status.stdout_lines
    when: final_service_status is defined
    
  # Create backup script for Minecraft worlds
  - name: Create backup script for Minecraft worlds
    copy:
      dest: /home/{{ ansible_ssh_user }}/backup-minecraft.sh
      content: |
        #!/bin/bash
        BACKUP_DIR="/home/{{ ansible_ssh_user }}/minecraft-backups"
        DATE=$(date +%Y%m%d_%H%M%S)
        mkdir -p $BACKUP_DIR
        
        # Backup Java world
        echo "Backing up Java Edition world..."
        docker run --rm -v mineclifford_minecraft_java_data:/data -v $BACKUP_DIR:/backup \
          alpine tar -czf /backup/minecraft_java_$DATE.tar.gz -C /data .
        
        # Backup Bedrock world
        echo "Backing up Bedrock Edition world..."
        docker run --rm -v mineclifford_minecraft_bedrock_data:/data -v $BACKUP_DIR:/backup \
          alpine tar -czf /backup/minecraft_bedrock_$DATE.tar.gz -C /data .
        
        # Keep only the last 5 backups
        cd $BACKUP_DIR
        ls -t minecraft_java_*.tar.gz | tail -n +6 | xargs -r rm
        ls -t minecraft_bedrock_*.tar.gz | tail -n +6 | xargs -r rm
        
        echo "Backup completed: $(date)"
      mode: '0755'
    delegate_to: "{{ manager_node }}"
    run_once: true

  # Add cron job for daily backups
  - name: Add cron job for daily Minecraft backups
    cron:
      name: "Minecraft world backups"
      hour: "4"
      minute: "0"
      job: "/home/{{ ansible_ssh_user }}/backup-minecraft.sh > /home/{{ ansible_ssh_user }}/minecraft-backup.log 2>&1"
    delegate_to: "{{ manager_node }}"
    run_once: true