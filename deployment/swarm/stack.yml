version: '3.8'

services:
  # Java Edition Minecraft Server
  minecraft-java:
    image: itzg/minecraft-server:{{ minecraft_java_version | default('latest') }}
    environment:
      - EULA=TRUE
      - TYPE=PAPER
      - MEMORY={{ minecraft_java_memory | default('2G') }}
      - DIFFICULTY={{ minecraft_java_difficulty | default('normal') }}
      - MODE={{ minecraft_java_gamemode | default('survival') }}
      - MOTD={{ minecraft_java_motd | default('Mineclifford Java Server') }}
      - OPS={{ minecraft_java_ops | default('') }}
      - ALLOW_NETHER={{ minecraft_java_allow_nether | default('true') }}
      - ENABLE_COMMAND_BLOCK={{ minecraft_java_enable_command_block | default('true') }}
      - SPAWN_PROTECTION={{ minecraft_java_spawn_protection | default('0') }}
      - VIEW_DISTANCE={{ minecraft_java_view_distance | default('10') }}
      - TZ={{ timezone | default('America/Sao_Paulo') }}
    ports:
      - "25565:25565"
    volumes:
      - minecraft_java_data:/data
    {% if minecraft_world_import is defined %}
      - {{ minecraft_world_import_dir | default('/tmp/minecraft-world-import') }}:/import_world:ro
    {% endif %}
    deploy:
      resources:
        limits:
          memory: 3G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      labels:
        com.mineclifford.service: "minecraft-java"
        com.mineclifford.type: "game-server"
        com.mineclifford.edition: "java"
    networks:
      - minecraft_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  {% if minecraft_bedrock_enabled | default(true) %}
  # Bedrock Edition Minecraft Server
  minecraft-bedrock:
    image: itzg/minecraft-bedrock-server:{{ minecraft_bedrock_version | default('latest') }}
    environment:
      - EULA=TRUE
      - GAMEMODE={{ minecraft_bedrock_gamemode | default('survival') }}
      - DIFFICULTY={{ minecraft_bedrock_difficulty | default('normal') }}
      - SERVER_NAME={{ minecraft_bedrock_server_name | default('Mineclifford Bedrock Server') }}
      - LEVEL_NAME={{ minecraft_bedrock_level_name | default('Mineclifford') }}
      - ALLOW_CHEATS={{ minecraft_bedrock_allow_cheats | default('false') }}
      - MAX_PLAYERS={{ minecraft_bedrock_max_players | default('10') }}
      - VIEW_DISTANCE={{ minecraft_bedrock_view_distance | default('10') }}
      - DEFAULT_PLAYER_PERMISSION_LEVEL={{ minecraft_bedrock_permission_level | default('member') }}
      - TZ={{ timezone | default('America/Sao_Paulo') }}
    ports:
      - "19132:19132/udp"
    volumes:
      - minecraft_bedrock_data:/data
    deploy:
      resources:
        limits:
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      labels:
        com.mineclifford.service: "minecraft-bedrock"
        com.mineclifford.type: "game-server"
        com.mineclifford.edition: "bedrock"
    networks:
      - minecraft_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  {% endif %}

  # RCON Web Admin
  rcon-web-admin:
    image: itzg/rcon:latest
    ports:
      - "4326:4326"
      - "4327:4327"
    volumes:
      - rcon_web_admin_data:/opt/rcon-web-admin/db
    environment:
      - RWA_PASSWORD={{ rcon_password | default('minecraft') }}
      - RWA_ADMIN=true
    depends_on:
      - minecraft-java
    networks:
      - minecraft_network
      - traefik_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      labels:
        com.mineclifford.service: "rcon-web-admin"
        com.mineclifford.type: "management"
        # Traefik labels for reverse proxy
        traefik.enable: "true"
        traefik.http.routers.rcon.rule: "Host(`rcon.{{ domain_name | default('localhost') }}`)"
        traefik.http.routers.rcon.entrypoints: "websecure"
        traefik.http.routers.rcon.tls: "true"
        traefik.http.services.rcon.loadbalancer.server.port: "4326"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:{{ prometheus_version | default('latest') }}
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - /home/{{ ansible_ssh_user }}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - /home/{{ ansible_ssh_user }}/prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - minecraft_network
      - traefik_network
    deploy:
      {% if not single_node_swarm | default(false) %}
      placement:
        constraints:
          - node.role == manager
      {% endif %}
      labels:
        com.mineclifford.service: "prometheus"
        com.mineclifford.type: "monitoring"
        # Traefik labels for reverse proxy
        traefik.enable: "true"
        traefik.http.routers.prometheus.rule: "Host(`metrics.{{ domain_name | default('localhost') }}`)"
        traefik.http.routers.prometheus.entrypoints: "websecure"
        traefik.http.routers.prometheus.tls: "true"
        traefik.http.services.prometheus.loadbalancer.server.port: "9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:{{ grafana_version | default('latest') }}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_password | default('admin') }}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - minecraft_network
      - traefik_network
    deploy:
      {% if not single_node_swarm | default(false) %}
      placement:
        constraints:
          - node.role == manager
      {% endif %}
      labels:
        com.mineclifford.service: "grafana"
        com.mineclifford.type: "monitoring"
        # Traefik labels for reverse proxy
        traefik.enable: "true"
        traefik.http.routers.grafana.rule: "Host(`monitor.{{ domain_name | default('localhost') }}`)"
        traefik.http.routers.grafana.entrypoints: "websecure"
        traefik.http.routers.grafana.tls: "true"
        traefik.http.services.grafana.loadbalancer.server.port: "3000"

  # Minecraft exporter for Prometheus
  minecraft-exporter:
    image: hkubota/minecraft-exporter:{{ minecraft_exporter_version | default('latest') }}
    ports:
      - "9150:9150"
    environment:
      - MC_SERVER=minecraft-java
      - MC_PORT=25565
    networks:
      - minecraft_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      labels:
        com.mineclifford.service: "minecraft-exporter"
        com.mineclifford.type: "monitoring"

  # Node exporter for hardware metrics
  node-exporter:
    image: prom/node-exporter:{{ node_exporter_version | default('latest') }}
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    deploy:
      mode: global
      labels:
        com.mineclifford.service: "node-exporter"
        com.mineclifford.type: "monitoring"
    networks:
      - minecraft_network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:{{ cadvisor_version | default('latest') }}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    deploy:
      mode: global
      labels:
        com.mineclifford.service: "cadvisor"
        com.mineclifford.type: "monitoring"
    networks:
      - minecraft_network

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 86400 --cleanup
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        com.mineclifford.service: "watchtower"
        com.mineclifford.type: "management"
    networks:
      - minecraft_network

volumes:
  minecraft_java_data:
  minecraft_bedrock_data:
  rcon_web_admin_data:
  prometheus_data:
  grafana_data:

networks:
  minecraft_network:
    driver: overlay
    attachable: true
  traefik_network:
    external: true