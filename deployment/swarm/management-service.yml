version: '3.8'

services:
  # Traefik - Reverse Proxy and Load Balancer
  traefik:
    image: traefik:v2.9
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"  # Dashboard is secured
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--accesslog=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - traefik_network
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        # Dashboard
        - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN_NAME}`)"
        - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
        - "traefik.http.routers.traefik-dashboard.service=api@internal"
        - "traefik.http.routers.traefik-dashboard.tls=true"
        - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
        - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
        # Auth middleware
        - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}:${TRAEFIK_DASHBOARD_PASSWORD_HASH}"
      restart_policy:
        condition: on-failure
        delay: 5s

  # Watchtower - Automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 86400 --cleanup --include-stopped --include-restarting
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - traefik_network

  # Portainer - Docker management UI
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - traefik_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_NAME}`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.tls=true"
        - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      restart_policy:
        condition: on-failure
        delay: 5s

  # Visualizer - Docker Swarm Visualization
  visualizer:
    image: dockersamples/visualizer:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.visualizer.rule=Host(`visualizer.${DOMAIN_NAME}`)"
        - "traefik.http.routers.visualizer.entrypoints=websecure"
        - "traefik.http.routers.visualizer.tls=true"
        - "traefik.http.routers.visualizer.tls.certresolver=letsencrypt"
        - "traefik.http.services.visualizer.loadbalancer.server.port=8080"
      restart_policy:
        condition: on-failure
        delay: 5s

  # DuckDNS - Dynamic DNS updater (if using DuckDNS)
  duckdns:
    image: linuxserver/duckdns:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-America/Sao_Paulo}
      - SUBDOMAINS=${DUCKDNS_SUBDOMAIN}
      - TOKEN=${DUCKDNS_TOKEN}
      - LOG_FILE=false
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - traefik_network

  # Node Exporter - System metrics for Prometheus
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - minecraft_network
    ports:
      - "9100:9100"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - minecraft_network
    ports:
      - "8081:8080"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s

volumes:
  traefik_letsencrypt:
  portainer_data:

networks:
  traefik_network:
    external: true
  minecraft_network:
    external: true