#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
MINECRAFT_JAVA_ENABLED=true
MINECRAFT_BEDROCK_ENABLED=true
MONITORING_ENABLED=true
OUTPUT_FILE="docker-stack.yml"
TEMPLATE_DIR="templates"
VARS_FILE="stack-vars.yml"

# Help function
function show_help {
    echo -e "${BLUE}Usage: $0 [OPTIONS]${NC}"
    echo -e "Generates a complete Docker Swarm stack file from templates and variables."
    echo -e ""
    echo -e "${YELLOW}Options:${NC}"
    echo -e "  -j, --no-java              Disable Java Edition"
    echo -e "  -b, --no-bedrock           Disable Bedrock Edition"
    echo -e "  -m, --no-monitoring        Disable monitoring stack"
    echo -e "  -o, --output FILE          Output file (default: docker-stack.yml)"
    echo -e "  -t, --template-dir DIR     Template directory (default: templates)"
    echo -e "  -v, --vars-file FILE       Variables file (default: stack-vars.yml)"
    echo -e "  -h, --help                 Show this help message"
    echo -e ""
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  $0"
    echo -e "  $0 --no-bedrock --output my-stack.yml"
    echo -e "  $0 --vars-file prod-vars.yml"
    exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -j|--no-java)
            MINECRAFT_JAVA_ENABLED=false
            shift
            ;;
        -b|--no-bedrock)
            MINECRAFT_BEDROCK_ENABLED=false
            shift
            ;;
        -m|--no-monitoring)
            MONITORING_ENABLED=false
            shift
            ;;
        -o|--output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        -t|--template-dir)
            TEMPLATE_DIR="$2"
            shift 2
            ;;
        -v|--vars-file)
            VARS_FILE="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            show_help
            ;;
    esac
done

# Check if required directories and files exist
if [[ ! -d "$TEMPLATE_DIR" ]]; then
    echo -e "${RED}Error: Template directory $TEMPLATE_DIR does not exist.${NC}"
    exit 1
fi

if [[ ! -f "$VARS_FILE" && -f "../ansible/$VARS_FILE" ]]; then
    VARS_FILE="../ansible/$VARS_FILE"
    echo -e "${YELLOW}Using variables file from ansible directory: $VARS_FILE${NC}"
fi

if [[ ! -f "$VARS_FILE" ]]; then
    echo -e "${YELLOW}Warning: Variables file $VARS_FILE does not exist. Using default values.${NC}"
fi

# Create a temporary directory for processing
TEMP_DIR=$(mktemp -d)
trap 'rm -rf "$TEMP_DIR"' EXIT

# Start with version header
cat > "$TEMP_DIR/stack.yml" << EOF
# Generated by compose-generator.sh on $(date)
# DO NOT EDIT DIRECTLY - MODIFY TEMPLATES INSTEAD

version: '3.8'

EOF

# Array to hold all service blocks
declare -a SERVICE_BLOCKS

# Process Java Edition template if enabled
if [[ "$MINECRAFT_JAVA_ENABLED" == "true" ]]; then
    echo -e "${BLUE}Processing Java Edition template...${NC}"
    if [[ -f "$TEMPLATE_DIR/minecraft-java.tmpl" ]]; then
        # Extract service block using awk and add to array
        SERVICE_BLOCKS+=("$(awk '/services:/,/networks:/' "$TEMPLATE_DIR/minecraft-java.tmpl" | sed -n '/services:/,/networks:/p' | sed '1d;$d')")
        echo -e "${GREEN}Java Edition template processed.${NC}"
    else
        echo -e "${RED}Error: Java Edition template not found at $TEMPLATE_DIR/minecraft-java.tmpl${NC}"
        exit 1
    fi
fi

# Process Bedrock Edition template if enabled
if [[ "$MINECRAFT_BEDROCK_ENABLED" == "true" ]]; then
    echo -e "${BLUE}Processing Bedrock Edition template...${NC}"
    if [[ -f "$TEMPLATE_DIR/minecraft-bedrock.tmpl" ]]; then
        # Extract service block using awk and add to array
        SERVICE_BLOCKS+=("$(awk '/services:/,/networks:/' "$TEMPLATE_DIR/minecraft-bedrock.tmpl" | sed -n '/services:/,/networks:/p' | sed '1d;$d')")
        echo -e "${GREEN}Bedrock Edition template processed.${NC}"
    else
        echo -e "${RED}Error: Bedrock Edition template not found at $TEMPLATE_DIR/minecraft-bedrock.tmpl${NC}"
        exit 1
    fi
fi

# Process Monitoring template if enabled
if [[ "$MONITORING_ENABLED" == "true" ]]; then
    echo -e "${BLUE}Processing Monitoring template...${NC}"
    if [[ -f "$TEMPLATE_DIR/monitoring.tmpl" ]]; then
        # Extract service block using awk and add to array
        SERVICE_BLOCKS+=("$(awk '/services:/,/networks:/' "$TEMPLATE_DIR/monitoring.tmpl" | sed -n '/services:/,/networks:/p' | sed '1d;$d')")
        echo -e "${GREEN}Monitoring template processed.${NC}"
    else
        echo -e "${RED}Error: Monitoring template not found at $TEMPLATE_DIR/monitoring.tmpl${NC}"
        exit 1
    fi
fi

# Combine service blocks
echo -e "${BLUE}Combining service blocks...${NC}"
echo "services:" >> "$TEMP_DIR/stack.yml"
for block in "${SERVICE_BLOCKS[@]}"; do
    echo "$block" >> "$TEMP_DIR/stack.yml"
done

# Add network and volume definitions
echo -e "${BLUE}Adding network and volume definitions...${NC}"

# Extract and combine volume definitions
echo "" >> "$TEMP_DIR/stack.yml"
echo "volumes:" >> "$TEMP_DIR/stack.yml"

if [[ "$MINECRAFT_JAVA_ENABLED" == "true" ]]; then
    awk '/volumes:/,/networks:/' "$TEMPLATE_DIR/minecraft-java.tmpl" | sed -n '/volumes:/,/networks:/p' | sed '1d;$d' >> "$TEMP_DIR/stack.yml"
fi

if [[ "$MINECRAFT_BEDROCK_ENABLED" == "true" ]]; then
    awk '/volumes:/,/networks:/' "$TEMPLATE_DIR/minecraft-bedrock.tmpl" | sed -n '/volumes:/,/networks:/p' | sed '1d;$d' >> "$TEMP_DIR/stack.yml"
fi

if [[ "$MONITORING_ENABLED" == "true" ]]; then
    awk '/volumes:/,/networks:/' "$TEMPLATE_DIR/monitoring.tmpl" | sed -n '/volumes:/,/networks:/p' | sed '1d;$d' >> "$TEMP_DIR/stack.yml"
fi

# Add network definitions
echo "" >> "$TEMP_DIR/stack.yml"
echo "networks:" >> "$TEMP_DIR/stack.yml"
echo "  minecraft_network:" >> "$TEMP_DIR/stack.yml"
echo "    driver: overlay" >> "$TEMP_DIR/stack.yml"
echo "  traefik_network:" >> "$TEMP_DIR/stack.yml"
echo "    external: true" >> "$TEMP_DIR/stack.yml"

# Replace variables if variables file exists
if [[ -f "$VARS_FILE" ]]; then
    echo -e "${BLUE}Replacing variables from $VARS_FILE...${NC}"
    
    # Use awk to extract variable assignments
    awk -F': ' '/^[a-zA-Z_][a-zA-Z0-9_]*:/ {print $1 "=" $2}' "$VARS_FILE" > "$TEMP_DIR/vars.sh"
    
    # Source the extracted variables
    source "$TEMP_DIR/vars.sh"
    
    # Replace variables in the stack file using envsubst
    export $(cut -d= -f1 "$TEMP_DIR/vars.sh")
    cat "$TEMP_DIR/stack.yml" | envsubst > "$TEMP_DIR/stack_processed.yml"
    
    # Move processed file to final output
    mv "$TEMP_DIR/stack_processed.yml" "$OUTPUT_FILE"
else
    # If no variables file, just copy the stack file to output
    cp "$TEMP_DIR/stack.yml" "$OUTPUT_FILE"
fi

echo -e "${GREEN}Docker Swarm stack file generated: $OUTPUT_FILE${NC}"
echo -e "${YELLOW}You can deploy it with:${NC} docker stack deploy -c $OUTPUT_FILE Mineclifford"